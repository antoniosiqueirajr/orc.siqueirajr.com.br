<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class api extends B10_Controller{    public function __construct() {        parent::__construct();    }        public function buscar_boletos_francesinha($dias_a_consultar = 1){        $param = array(            'dias_a_consultar' => $dias_a_consultar        );        $this->load->model('apiboletousecases');        echo $this->apiboletousecases->buscarFrancesinha($param);    }        public function cartao_consultar_parcelas($id_unidade,$nsu){        $this->load->model('benepop');        $this->load->library('api_userede');        $unidade = $this->benepop->get_unidade($id_unidade);        $token = $this->api_userede->getToken();        $hasNextKey = TRUE;        $nextKey = '';        while($hasNextKey === TRUE){            $retorno = $this->api_userede->consultarVendasParcelas(array(                'data_inicial' => soma_dias_uteis(date('Y-m-d'),7,array(0,1,2,3,4,5,6),array(),'-'),                'data_final' => soma_dias_uteis(date('Y-m-d'),1,array(0,1,2,3,4,5,6),array(),'-'),                'nextKey' => $nextKey,                'matriz' => $unidade->erede_companynumber,                'filial' => $unidade->erede_companynumber,            ),$token->access_token);            $dados = json_decode($retorno);            if(property_exists($dados, 'content')){                echo $retorno;                echo "<hr>";                foreach($dados->content->installments as $parcela){                    if(!isset($parcelas[$parcela->nsu])){                        $parcelas[$parcela->nsu] = array();                    }                    $parcelas[$parcela->nsu][$parcela->installmentNumber] = $parcela;                }                $hasNextKey = $dados->cursor->hasNextKey;                $nextKey = @$dados->cursor->nextKey;            }            else{                $hasNextKey = FALSE;                $nextKey = '';            }        }    }        public function cartao_consultar($codigo){        $codigo_arr = explode('-', urldecode($codigo));        $id_unidade = $codigo_arr[0];        $nsu = $codigo_arr[1];        $this->load->model('apicartaousecases');        $resultado = $this->apicartaousecases->buscarTransacaoCartao($nsu,$id_unidade);        echo json_encode($resultado);    }        public function boleto_consultar($codigo){        $codigo_arr = explode('-',$codigo);        $id_unidade = $codigo_arr[0];        $nosso_numero = $codigo_arr[1];        $this->load->model('benepop');        $this->load->library('api_boleto');        $token = json_decode($this->parametro->get_valor('api_itau_token'));        if(strtotime($token->token_validade) < strtotime(date('Y-m-d H:i:s'))){            $token = $this->api_boleto->getToken();            if(!property_exists($token, 'access_token')){                echo json_encode(array(                'resultado' => 'erro',                'conteudo' => 'Falha ao obter o token'            ));                return;            }            $token->token_validade = date('Y-m-d H:i:s',strtotime(date('Y-m-d H:i:s')." + $token->expires_in seconds"));            $this->parametro->set_valor('api_itau_token',json_encode($token));        }        $boleto = $this->benepop->get_boleto($id_unidade,$nosso_numero);        if(!is_object($boleto)){            echo json_encode(array(                'resultado' => 'erro',                'conteudo' => 'Boleto inexistente'            ));            return;        }        $id_beneficiario = $boleto->agencia_numero.str_pad($boleto->beneficiario_cod_cliente, 8, '0', STR_PAD_LEFT);        $codigo_carteira = $boleto->carteira;        $retorno = $this->api_boleto->consultar($id_beneficiario, $codigo_carteira, $nosso_numero, $token->access_token);        if(!isset($retorno->data[0])){            echo json_encode(array(                'resultado' => 'erro',                'conteudo' => 'Boleto não encontrado no WebService'            ));            return;        }        else{            $dados_boleto = $retorno->data[0];            $situacao_geral_boleto = $dados_boleto->dado_boleto->dados_individuais_boleto[0]->situacao_geral_boleto;            switch ($situacao_geral_boleto) {                case 'Baixada':                    if($boleto->remessa_gerada != 'B'){                        $this->benepop->baixar_boleto($boleto,$dados_boleto);                    }                    break;                case 'Paga':                    if($boleto->remessa_gerada != 'L'){                        $this->benepop->liquidar_boleto($boleto,$dados_boleto);                    }                    break;                case 'Aguardando Confirmação de Pagamento':                    if($boleto->remessa_gerada != 'A'){                        $this->benepop->provisionar_pagamento_boleto($boleto,$dados_boleto);                    }                    break;                default:                    $this->benepop->atualizar_boleto($boleto,$dados_boleto);                    break;            }            echo json_encode(array(                'resultado' => 'ok',                'conteudo' => $retorno->data[0]            ));            return;        }    }    public function boleto_registrar($codigo){        $codigo_arr = explode('-',$codigo);        $id_unidade = $codigo_arr[0];        $nosso_numero = $codigo_arr[1];        $this->load->model('benepop');        $this->load->library('api_boleto');        $boleto = $this->benepop->validar_boleto($id_unidade,$nosso_numero);                if($boleto === FALSE){            return FALSE;        }        $token = json_decode($this->parametro->get_valor('api_itau_token'));        if(strtotime($token->token_validade) < strtotime(date('Y-m-d H:i:s'))){            $token = $this->api_boleto->getToken();            if(!property_exists($token, 'access_token')){                echo json_encode(array(                'resultado' => 'erro',                'conteudo' => 'Falha ao obter o token'            ));                return;            }            $token->token_validade = date('Y-m-d H:i:s',strtotime(date('Y-m-d H:i:s')." + $token->expires_in seconds"));            $this->parametro->set_valor('api_itau_token',json_encode($token));        }        $resultado = $this->api_boleto->registrar($boleto,$token->access_token);        if($resultado === FALSE){            echo json_encode(array(                'codigo' => 400,                'mensagem'=>'Dados do boleto inválidos'            ));            return;        }        $resultado_obj = json_decode($resultado);        if(strpos(@$resultado_obj->codigo,'2') !== 0){            $this->benepop->atualizar_dados_boleto($id_unidade,$nosso_numero);            $resultado = $this->api_boleto->registrar($boleto,$token->access_token);            $resultado_obj = json_decode($resultado);            if(strpos(@$resultado_obj->codigo,'2') !== 0){                echo $resultado;                return;            }        }        $this->benepop->registrar_boleto($boleto);        echo $resultado;        return;    }        public function boleto_atualizar($codigo){        $codigo_arr = explode('-',$codigo);        $id_unidade = $codigo_arr[0];        $nosso_numero = $codigo_arr[1];        $this->load->model('benepop');        $this->load->library('api_boleto');                $boleto = $this->benepop->validar_boleto($id_unidade,$nosso_numero);        if(!is_object($boleto)){            return FALSE;        }                $token = json_decode($this->parametro->get_valor('api_itau_token'));        if(strtotime($token->token_validade) < strtotime(date('Y-m-d H:i:s'))){            $token = $this->api_boleto->getToken();            if(!property_exists($token, 'access_token')){                echo json_encode(array(                'resultado' => 'erro',                'conteudo' => 'Falha ao obter o token'            ));                return;            }            $token->token_validade = date('Y-m-d H:i:s',strtotime(date('Y-m-d H:i:s')." + $token->expires_in seconds"));            $this->parametro->set_valor('api_itau_token',json_encode($token));        }        echo $this->api_boleto->alterar($boleto,$token->access_token);    }        public function boleto_validar_json(){        $this->load->model('benepop');        $boletos = $this->benepop->get_boletos_a_registrar();        foreach($boletos as $boleto){            $boleto = $this->benepop->validar_boleto($boleto->id_unidade,$boleto->nosso_numero);            if($boleto === FALSE){                continue;            }            if($boleto->juros_dia == 0){                $boleto->juros_dia = $boleto->valor_boleto * 0.02 / 30;            }            if($boleto->juros_dia < 0.01){                $boleto->juros_dia = 0.01;            }            $dados = array(                'data' => array(                    'etapa_processo_boleto' => 'efetivacao',                    'codigo_canal_operacao' => 'API',                    'beneficiario' => array(                        'id_beneficiario' => $boleto->id_beneficiario                    ),                    'dado_boleto' => array(                        'descricao_instrumento_cobranca' => 'boleto',                        'tipo_boleto' => 'a vista',                        'codigo_carteira' => $boleto->carteira,                        'valor_total_titulo' => str_pad(round($boleto->valor_boleto * 100, 0), 17, '0', STR_PAD_LEFT),                        'codigo_especie' => '01',                        'data_emissao' => date('Y-m-d'),                        'indicador_pagamento_parcial' => false,                        'quantidade_maximo_parcial' => 0,                        'pagador' => array(                            'pessoa' => array(                                'nome_pessoa' => substr(utf8_encode($boleto->pagador_nome),0,50),                                'tipo_pessoa' => array(                                    'codigo_tipo_pessoa' => 'F',                                    'numero_cadastro_pessoa_fisica' => $boleto->pagador_documento                                )                            ),                            'endereco' => array(                                'nome_logradouro' => substr(utf8_encode($boleto->pagador_logradouro),0,45),                                'nome_bairro' => substr(utf8_encode($boleto->pagador_bairro),0,15),                                'nome_cidade' => substr(utf8_encode($boleto->pagador_municipio),0,20),                                'sigla_UF' => $boleto->pagador_uf,                                'numero_CEP' => only_numbers($boleto->pagador_cep)                            )                        ),                        'dados_individuais_boleto' => array(                            array(                                'numero_nosso_numero' => $boleto->nosso_numero,                                'data_vencimento' => $boleto->data_vencimento,                                'valor_titulo' => str_pad(round($boleto->valor_boleto * 100, 0), 17, '0', STR_PAD_LEFT),                                'texto_uso_beneficiario' => '',                                'texto_seu_numero' => $boleto->bol_id                            )                        ),                        'multa' => array(                            'codigo_tipo_multa' => '02',                            'quantidade_dias_multa' => 0,                            'percentual_multa' => $boleto->per_multa*100000                        ),                        'juros' => array(                            'codigo_tipo_juros' => '93',                            'quantidade_dias_juros' => 0,                            'valor_juros' => str_pad(round($boleto->juros_dia * 100, 0), 17, '0', STR_PAD_LEFT),                        ),                        'recebimento_divergente' => array(                            'codigo_tipo_autorizacao' => '03'                        ),                        'desconto_expresso' => false                    )                )            );            $json = json_encode($dados);            if(!$json){                print_r($dados);                die();            }        }        echo count($boletos), ' boletos válidos';    }                        private function atualizarStatusCartoesVendasApi($data,$unidade,$token){        $this->load->model('benepop');        $this->load->library('api_userede');        if($unidade->erede_companynumber == ''){            return;        }        $transacoes = array();        $hasNextKey = TRUE;        $nextKey = '';        while($hasNextKey === TRUE){            $retorno = $this->api_userede->consultarVendas(array(                'data_inicial' => $data,                'data_final' => $data,                'nextKey' => $nextKey,                'matriz' => $unidade->erede_companynumber,            ),$token->access_token);            $dados = json_decode($retorno);            if(property_exists($dados, 'content')){                foreach($dados->content->salesDaily as $dia){                    $transacoes += $dia->sales;                }                $hasNextKey = $dados->cursor->hasNextKey;                $nextKey = @$dados->cursor->nextKey;            }            else{                $hasNextKey = FALSE;                $nextKey = '';            }        }        $parcelas = array();        $hasNextKey = TRUE;        $nextKey = '';        while($hasNextKey === TRUE){            $retorno = $this->api_userede->consultarVendasParcelas(array(                'data_inicial' => $data,                'data_final' => $data,                'nextKey' => $nextKey,                'matriz' => $unidade->erede_companynumber,                'filial' => $unidade->erede_companynumber,            ),$token->access_token);            $dados = json_decode($retorno);            if(property_exists($dados, 'content')){                foreach($dados->content->installments as $parcela){                    if(!isset($parcelas[$parcela->nsu])){                        $parcelas[$parcela->nsu] = array();                    }                    $parcelas[$parcela->nsu][$parcela->installmentNumber] = $parcela;                }                $hasNextKey = $dados->cursor->hasNextKey;                $nextKey = @$dados->cursor->nextKey;            }            else{                $hasNextKey = FALSE;                $nextKey = '';            }        }        foreach($transacoes as $transacao){            $this->benepop->lancar_transacao_cartao($transacao,$unidade);            $this->benepop->atualizar_status_cartao($transacao,$parcelas);        }    }        public function testeTokenBoleto(){        $this->load->model('benepop');        $this->load->library('api_boleto');        $token = json_decode($this->parametro->get_valor('api_itau_token'));        echo 'Token atual: <br>';        print_r($token);        echo '<br>Token gerado: ';        print_r($this->api_boleto->getToken());    }            public function oauth($tipo){        if($tipo == 'token'){            $input = $this->input->post();            if(isset($input['webhook_client_id'])){                $input['client_id'] = $input['webhook_client_id'];                $input['client_secret'] = $input['webhook_client_secret'];            }            if(!isset($input['client_id'])){                $headers = null;                if (isset($_SERVER['Authorization'])) {                    $headers = trim($_SERVER["Authorization"]);                }                else if (isset($_SERVER['HTTP_AUTHORIZATION'])) {                    $headers = trim($_SERVER["HTTP_AUTHORIZATION"]);                }                elseif (function_exists('apache_request_headers')) {                    $requestHeaders = apache_request_headers();                    $requestHeaders = array_combine(array_map('ucwords', array_keys($requestHeaders)), array_values($requestHeaders));                    if (isset($requestHeaders['Authorization'])) {                        $headers = trim($requestHeaders['Authorization']);                    }                }                $auth = explode(':',base64_decode(str_replace('Basic ','',$headers)));                if(isset($auth[1])){                    $input['client_id'] = $auth[0];                    $input['client_secret'] = $auth[1];                }            }            $log = json_decode($this->parametro->get_valor('webhook_oauth_log'));            $log[] = array(                'moment'=>date('Y-m-d H:i:s'),                'input'=>$input,            );            $this->parametro->set_valor('webhook_oauth_log',json_encode($log));            $webhook_client_id = $this->parametro->get_valor('webhook_client_id');            $webhook_client_secret = $this->parametro->get_valor('webhook_client_secret');                        if(($input['client_id'] ?? FALSE) == $webhook_client_id && ($input['client_secret'] ?? FALSE) == $webhook_client_secret){                $this->parametro->criar_parametro("webhook_token_$webhook_client_id",json_encode(array()));                $token = $this->parametro->get_valor("webhook_token_$webhook_client_id");                $tokenData = json_decode($token);                if(strtotime($tokenData->token_validade) > strtotime(date('Y-m-d'))){                    echo $token;                    return;                }                $this->load->library('jwt');                $exp = date('Y-m-d H:i:s', strtotime('+300 seconds'));                $newToken = json_encode(array(                    'access_token' => $this->jwt->create(array(                        'sub' => $webhook_client_id,                        'iss' => base_url(uri_string()),                        'exp' => $exp,                        'aud' => 'Itau Webhook',                        'scope' => 'boleto/retorno-webhook'                    )),                    'token_type' => 'Bearer',                    'expires_in' => 300,                    'scope' => 'boleto/retorno-webhook',                    'active' => true,                    'token_validade' => $exp,                ));                $this->parametro->set_valor("webhook_token_$webhook_client_id",$newToken);                echo $newToken;            }            else{                header("HTTP/1.1 403 Forbidden");                echo json_encode(array(                    'codigo' => 403,                    //'mensagem' => 'A autenticação falhou'                    'mensagem' => $input                ));                return;            }        }    }        public function boleto($operacao){        $this->parametro->criar_parametro('webhook_notify_log',json_encode(array()));        if($operacao == 'notificar'){            $this->load->model('jwt');            $tokenData = $this->jwt->getBearerData();            $input = file_get_contents('php://input');            $log = json_decode($this->parametro->get_valor('webhook_notify_log'));            $log[] = array('header' => $tokenData,'body'=>$input,'moment'=>date('Y-m-d H:i:s'));            $this->parametro->set_valor('webhook_notify_log',json_encode($log));            $data = json_decode($input, true);            if(strtotime($tokenData->exp) < strtotime(date('Y-m-d'))){                header("HTTP/1.1 401 Unauthorized");                echo json_encode(array(                    'codigo' => 401,                    'mensagem' => 'O token informado expirou'                ));                return;            }            if(strtotime($tokenData->exp) < strtotime(date('Y-m-d'))){                header("HTTP/1.1 401 Unauthorized");                echo json_encode(array(                    'codigo' => 401,                    'mensagem' => 'O token informado expirou'                ));                return;            }            if($tokenData->sub != $this->parametro->get_valor('webhook_client_id')){                header("HTTP/1.1 401 Unauthorized");                echo json_encode(array(                    'codigo' => 401,                    'mensagem' => 'Client Id não encontrado'                ));                return;            }            if(strpos($tokenData->scope,'boleto/retorno-webhook') === FALSE){                header("HTTP/1.1 401 Unauthorized");                echo json_encode(array(                    'codigo' => 401,                    'mensagem' => 'Endpoint não autorizado'                ));                return;            }            return; // Fim da operação sem realizar a baixa ou liquidação;            $this->load->model('benepop');            $unidades = array();            foreach($this->benepop->get_unidades() as $unidade){                $unidades[$unidade->agencia_numero.str_pad($unidade->beneficiario_cod_cliente, 8, '0', STR_PAD_LEFT)] = $unidade;            }            foreach($data->boletos as $dados_boleto){                $unidade = $unidades[$dados_boleto->idBeneficiario];                $boleto = $this->benepop->get_boleto($unidade->id_unidade,$dados_boleto->numeroNossoNumero);                switch ($dados_boleto->tipoLiquidacao) {                    case '06':                        if($boleto->remessa_gerada != 'L'){                            $pessoa = new stdClass();                            $pessoa->nome_pessoa = $dados_boleto->nomePagador;                            $pagador = new stdClass();                            $pagador->pessoa = $pessoa;                                                        $pagamento_cobranca = new stdClass();                            $pagamento_cobranca->data_inclusao_pagamento = $dados_boleto->dataInclusaoPagamento;                            $pagamento_cobranca->valor_pago_total_cobranca = $dados_boleto->valorPagoTotalCobranca;                                                        $dado_boleto = new stdClass();                            $dado_boleto->pagamentos_cobranca = array($pagamento_cobranca);                            $dado_boleto->pagador = $pagador;                                                        $info_liquidacao = new stdClass();                            $info_liquidacao->dado_boleto = $dado_boleto;                            $info_liquidacao->id_boleto = $dados_boleto->idBoleto;                                                        $this->benepop->liquidar_boleto($boleto,$info_liquidacao);                        }                        break;                                            case '95':                        if($boleto->remessa_gerada != 'B'){                            $info_baixa = new stdClass();                            $info_baixa->id_boleto = $dados_boleto->idBoleto;                                                        $this->benepop->baixar_boleto($boleto,$info_baixa);                        }                        break;                    default:                        break;                }            }        }    }        public function get_notificacoes_boletos(){        $url = "https://api.itau.com.br/boletos/v3/notificacoes_boletos";        $query = http_build_query(array(            'id_beneficiario' => '411400997564',            'tipo_notificacao' => 'BAIXA_EFETIVA'        ));        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => "$url?$query",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => '',            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 0,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => 'GET',            CURLOPT_SSLCERT => './certs/certificado.crt',            CURLOPT_SSLKEY => './certs/ARQUIVO_CHAVE_PRIVADA.key',            CURLOPT_HEADER => TRUE,            CURLOPT_HTTPHEADER => array(                'x-itau-apikey: 0d78a443-4f20-4e8d-a574-743ea61e9350',                'x-itau-correlationID: 9e1bb2db-2b0b-41b3-b2e7-a9a47fcd75a9',                'x-itau-flowID: 7759b093-3a03-47b7-a2d6-a5b14ac40eca',                'Content-Type: application/json',                //"Authorization: Bearer $token"            ),        ));        $response = curl_exec($curl);                $headerSize = curl_getinfo( $curl , CURLINFO_HEADER_SIZE );        $headerStr = substr( $response , 0 , $headerSize );        $bodyStr = substr( $response , $headerSize );                        $error = curl_error($curl);        curl_close($curl);                if($error){            echo json_encode($error);        }        elseif($bodyStr){            echo $bodyStr;        }        else{            $headers = explode("\r\n",$headerStr);            foreach($headers as $header){                if(strpos($header, 'HTTP') !== FALSE){                    $resultado = $header;                }            }            switch ($resultado) {                case '"HTTP\/1.1 204 No Content"':                    $retorno = 'A Consulta não Retornou Dados.';                    break;                default:                    $retorno = $resultado;                    break;            }            echo json_encode($retorno);        }    }        public function getBoletosWebhookAuthLog(){        //echo $this->parametro->get_valor("webhook_token_44d8df36-1cd4-40b7-927c-cc50510a8f52");        echo $this->parametro->get_valor('webhook_oauth_log');    }        public function clearBoletosWebhookAuthLog(){        $this->parametro->set_valor("webhook_oauth_log",'');        echo 'ok';    }        public function getBoletosCredentials(){        die();        $webhook_client_id = $this->parametro->get_valor('webhook_client_id');        $webhook_client_secret = $this->parametro->get_valor('webhook_client_secret');               echo "$webhook_client_id<br>$webhook_client_secret";    }        public function getBoletos(){        $url = "https://api.itau.com.br/boletos/v3/get/boletos";        $query = http_build_query(array(            'id_beneficiario' => '411400997564',            'data_inicial' => '2023-07-14',            'data_final' => '2023-07-17',            'tipo_data' => 'vencimento'        ));        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => "$url?$query",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => '',            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 0,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => 'GET',            CURLOPT_SSLCERT => './certs/certificado.crt',            CURLOPT_SSLKEY => './certs/ARQUIVO_CHAVE_PRIVADA.key',            CURLOPT_HEADER => TRUE,            CURLOPT_HTTPHEADER => array(                'x-itau-apikey: 0d78a443-4f20-4e8d-a574-743ea61e9350',                'x-itau-correlationID: 9e1bb2db-2b0b-41b3-b2e7-a9a47fcd75a9',                'x-itau-flowID: 7759b093-3a03-47b7-a2d6-a5b14ac40eca',                'Content-Type: application/json',                //"Authorization: Bearer $token"            ),        ));        $response = curl_exec($curl);                $headerSize = curl_getinfo( $curl , CURLINFO_HEADER_SIZE );        $headerStr = substr( $response , 0 , $headerSize );        $bodyStr = substr( $response , $headerSize );                        $error = curl_error($curl);        curl_close($curl);                if($error){            echo json_encode($error);        }        elseif($bodyStr){            echo $bodyStr;        }        else{            $headers = explode("\r\n",$headerStr);            foreach($headers as $header){                if(strpos($header, 'HTTP') !== FALSE){                    $resultado = $header;                }            }            switch ($resultado) {                case '"HTTP\/1.1 204 No Content"':                    $retorno = 'A Consulta não Retornou Dados.';                    break;                default:                    $retorno = $resultado;                    break;            }            echo json_encode($retorno);        }    }        public function ajustar_vencimentos_cartao(){        $this->load->model('benepop');        $reprocessar = array();        foreach($this->benepop->ajustar_vencimentos_cartao() as $nsu){            $reprocessar[] = $nsu;        }        $this->benepop->ajustar_vencimento_mov_finc();        echo json_encode(array(            'reprocessar' => $reprocessar        ));    }        public function validar_caches_cartao() {        $invalidos = array();        $path = 'cache/apis/userede';        $files = scandir($path);        $x = 0;        $agora = time();        foreach ($files as $file) {            if(!is_file("$path/$file")){                continue;            }            $conteudo = file_get_contents("$path/$file");            $json = json_decode($conteudo);            if(!$json && !in_array($conteudo, $invalidos)){                $invalidos[] = $conteudo;            }            elseif(!property_exists($json, 'content') && !property_exists($json, 'netAmount') && !in_array($conteudo, $invalidos)){                $invalidos[] = $conteudo;            }            $x++;        }        foreach($invalidos as $invalido){            echo "$invalido<br>";        }    }    public function cartoes_falha_concilicao(){        echo $this->parametro->get_valor('transacoes_nao_encontradas_userede');    }        public function reprocessar_cartoes_nao_conciliados(){        $this->load->model('benepop');        $this->load->model('parametro');        $this->load->library('api_userede');        $this->load->model('apicartaousecases');        set_time_limit(600);        $nsus_invalidos = (array)json_decode($this->parametro->get_valor('transacoes_nao_encontradas_userede'));        $a_consultar = array();        foreach($this->benepop->get_unidades() as $unidade){            if($unidade->erede_companynumber == ''){                continue;            }            $cartoes = $this->benepop->reprocessar_cartoes_nao_conciliados($unidade->id_unidade);            foreach($cartoes as $cartao){                if(in_array($cartao->codigo_autenticacao, $nsus_invalidos)){                    continue;                }                $a_consultar[] = array(                    'nsu'   =>  $cartao->codigo_autenticacao,                    'unidade' => $unidade->id_unidade                );            }        }        $page = array(            'body'  =>  $this->view('api/reprocessar_cartoes_nao_conciliados',array(                'cartoes' => $a_consultar            ),TRUE),        );        $this->makePage(FALSE, $page);    }        public function cartao_vendas_dia($data){        $this->load->model('apicartaousecases');        echo $this->apicartaousecases->buscarVendasPorDia($data,$data);    }}