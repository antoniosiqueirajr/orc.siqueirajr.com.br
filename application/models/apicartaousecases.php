<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class apicartaousecases extends B10_Model{        private $token;        public function __construct(){        parent::__construct();        $this->load->model('benepop');        $this->load->library('api_userede');    }        /* Inicio: Lógica de consulta de cartão por NSU e Unidade */        public function buscarTransacaoCartao($nsu,$id_unidade){        $unidade = $this->benepop->get_unidade($id_unidade);        $venda = $this->benepop->get_venda_cartao($nsu);        if(!is_object($venda)){            return array(                'resultado' => 'erro',                'conteudo' => "Venda inexistente: $id_unidade - $nsu"            );        }        $this->token = $this->api_userede->getToken()->access_token;        $retorno = $this->buscarParcelaApiRede($venda->data_venda,$unidade->erede_companynumber,$nsu);        if(@$retorno['resultado'] == 'erro'){            $this->benepop->atualizar_falha_conciliacao($unidade,$nsu,$retorno['conteudo']);        }        return $retorno;    }        public function buscarParcelaApiRede($data_venda,$company_number,$nsu){        $retorno = $this->api_userede->consultarParcelas(array(            'saleDate' => $data_venda,            'companyNumber' => $company_number,            'nsu' => $nsu,        ),$this->token,TRUE);        $dados = json_decode($retorno);        if(!property_exists($dados, 'content')){            if($this->atualizarDataVendaApiRede($data_venda,$company_number,$nsu)){                return $this->buscarParcelaApiRede($data_venda, $company_number, $nsu);            }            else{                if(strtotime($data_venda) < strtotime(soma_dias_uteis(date('Y-m-d'), 3, array(0,1,2,3,4,5,6), array(), '-'))){                    $this->benepop->falha_conciliacao_cartao($nsu);                }                return array(                    'resultado' => 'erro',                    'conteudo' => 'Venda não encontrada na Userede'                );            }        }        return $this->processarRetornoApiRede($dados,$nsu,$company_number,$data_venda);    }        public function processarRetornoApiRede($dados,$nsu,$company_number,$data_venda){        $pagos = 0;        $agendados = 0;        $conciliado = FALSE;        for ($x = 0; $x < count($dados->content->installments); $x++) {            $par = $dados->content->installments[$x];            if($par->status == 'PAID' || $par->status == 'ANTICIPATED'){                $this->processarRetornoApiRedeLiquidado($par,$nsu,$company_number);                $pagos++;            }            elseif($par->status == 'SCHEDULLED'){                if(!$conciliado){                    $this->processarRetornoApiRedeConciliado($nsu,$company_number,$data_venda);                    $conciliado = TRUE;                }                $this->benepop->conciliar_cartao($par,$nsu);                $agendados++;            }        }        if(!$conciliado){            $this->processarRetornoApiRedeConciliado($nsu,$company_number,$data_venda);        }        return $dados->content->installments;    }        public function consultarVendas($data_inicial,$data_final,$company_number,$nextKey = '',$nsu = FALSE){        $transacoes = array();        $parametros = array(            'data_inicial' => soma_dias_uteis($data_inicial,5,array(0,1,2,3,4,5,6),array(),'-'),            'data_final' => soma_dias_uteis($data_final,5,array(0,1,2,3,4,5,6),array()),            'nextKey' => $nextKey,            'matriz' => $company_number        );        if($nsu){            $parametros['nsu'] = $nsu;        }        $retorno = $this->api_userede->consultarVendas($parametros,$this->token);        $dados = json_decode($retorno);        $hasNextKey = FALSE;        $nextKey = '';        if(property_exists($dados, 'content')){            foreach($dados->content->salesDaily as $dia){                $transacoes += $dia->sales;            }            $hasNextKey = $dados->cursor->hasNextKey;            $nextKey = @$dados->cursor->nextKey;        }        if($hasNextKey){            $transacoes + $this->consultarVendas($data_inicial, $data_final, $company_number, $nextKey, $nsu);        }        return $transacoes;    }        public function consultarParcelas($data_inicial,$data_final,$company_number,$nextKey = '',$nsu = FALSE){        $parcelas = array();        $parametros = array(            'data_inicial' => $data_inicial,            'data_final' => $data_final,            'nextKey' => $nextKey,            'matriz' => $company_number,            'filial' => $company_number        );        if($nsu){            $parametros['nsu'] = $nsu;        }        $retorno = $this->api_userede->consultarVendasParcelas($parametros,$this->token,TRUE);        $dados = json_decode($retorno);        $hasNextKey = FALSE;        $nextKey = '';        if(property_exists($dados, 'content')){            foreach($dados->content->installments as $parcela){                if(!isset($parcelas[$parcela->nsu])){                    $parcelas[$parcela->nsu] = array();                }                $parcelas[$parcela->nsu][$parcela->installmentNumber] = $parcela;            }            $hasNextKey = $dados->cursor->hasNextKey;            $nextKey = @$dados->cursor->nextKey;        }        if($hasNextKey){            $parcelas + $this->consultarVendas($data_inicial, $data_final, $company_number, $nextKey, $nsu);        }        return $parcelas;    }        public function processarRetornoApiRedeConciliado($nsu,$company_number,$data_venda){        $transacoes = $this->consultarVendas($data_venda, $data_venda, $company_number, '', $nsu);        $parcelas = $this->consultarParcelas($data_venda, $data_venda, $company_number, '', $nsu);        foreach($transacoes as $transacao){            $unidade = $this->benepop->get_unidade_por_company_number($company_number);            $this->benepop->lancar_transacao_cartao($transacao,$unidade);            if(!$this->benepop->atualizar_status_cartao($transacao,$parcelas,FALSE,TRUE)){                $mensagem = $this->session->userdata('debug');                $this->benepop->atualizar_falha_conciliacao($unidade,$nsu,$mensagem);            }        }        return TRUE;    }        public function processarRetornoApiRedeLiquidado($parcela,$nsu,$company_number){        $infoPagamento = $this->api_userede->consultarIdPagamento(array(            'companyNumber' => $company_number,            'paymentId' => $parcela->paymentId        ),$this->token);        $parcela->paymentDate = json_decode($infoPagamento)->paymentDate;        $parcela->paymentInfo = json_decode($infoPagamento);        $this->benepop->liquidar_cartao($parcela,$nsu);        return TRUE;    }        public function atualizarDataVendaApiRede($data_venda,$company_number,$nsu){        $data = soma_dias_uteis($data_venda,10,array(0,1,2,3,4,5,6),array(),'-');        $limite = strtotime(soma_dias_uteis($data_venda,10,array(0,1,2,3,4,5,6),array()));        while(strtotime($data) <= $limite){            $retorno = $this->api_userede->consultarVendas(array(                'data_inicial' => $data,                'data_final' => $data,                'matriz' => $company_number,                'nsu' => $nsu            ),$this->token);            $dados = json_decode($retorno);            if(property_exists($dados, 'content')){                if(property_exists($dados->content, 'salesDaily')){                    if(count($dados->content->salesDaily)){                        $this->benepop->atualizar_data_venda_cartao($nsu,$dados->content->salesDaily[0]->sales[0]->saleDate);                        return true;                    }                }            }            $data = soma_dias_uteis($data,1,array(0,1,2,3,4,5,6),array());        }        return false;    }        /* Fim: Lógica de consulta de cartão por NSU e Unidade*/        /* Inicio: Lançamento de Vendas do dia*/        public function buscarVendasPorDia($data_inicial,$data_final){        $unidades = $this->benepop->get_unidades_erede();        $this->token = $this->api_userede->getToken()->access_token;        for ($x = 0; $x < count($unidades); $x++) {            $un = $unidades[$x];            $transacoes = $this->buscarVendasPorDiaApiRede($data_inicial,$data_final,$un->erede_companynumber);            $parcelas = $this->buscarParcelasPorDiaApiRede($data_inicial,$data_final,$un->erede_companynumber);            $dados = json_encode(array(                substr($data_inicial,5,2) => array(                    $un->id_unidade => array(                        'transacoes' => $transacoes,                        'parcelas' => $parcelas                    )                )            ));            $this->parametro->criar_parametro("cartoes_$data_inicial",$dados);            echo $dados;            foreach($transacoes as $transacao){                $this->benepop->lancar_transacao_cartao($transacao,$un);                $this->benepop->atualizar_status_cartao($transacao,$parcelas);            }        }    }        public function buscarVendasPorDiaApiRede($data_inicial,$data_final,$companynumber){        $transacoes = array();        $hasNextKey = TRUE;        $nextKey = '';        $pagina = 0;        while($hasNextKey === TRUE){            $pagina++;            $retorno = $this->api_userede->consultarVendas(array(                'data_inicial' => $data_inicial,                'data_final' => $data_final,                'pageKey' => $nextKey,                'matriz' => $companynumber,            ),$this->token);            $dados = json_decode($retorno);            if(property_exists($dados, 'content')){                foreach($dados->content->salesDaily as $dia){                    $transacoes += $dia->sales;                }                $hasNextKey = $dados->cursor->hasNextKey;                if(property_exists($dados->cursor, 'nextKey')){                    $nextKey = $dados->cursor->nextKey;                }                else{                    $nextKey = '';                }            }            else{                $hasNextKey = FALSE;                $nextKey = '';            }        }        return $transacoes;    }        public function buscarParcelasPorDiaApiRede($data_inicial,$data_final,$companynumber){        $parcelas = array();        $hasNextKey = TRUE;        $nextKey = '';        while($hasNextKey === TRUE){            $retorno = $this->api_userede->consultarVendasParcelas(array(                'data_inicial' => $data_inicial,                'data_final' => $data_final,                'nextKey' => $nextKey,                'matriz' => $companynumber,                'filial' => $companynumber,            ),$this->token);            $dados = json_decode($retorno);            if(property_exists($dados, 'content')){                foreach($dados->content->installments as $parcela){                    if(!isset($parcelas[$parcela->nsu])){                        $parcelas[$parcela->nsu] = array();                    }                    $parcelas[$parcela->nsu][$parcela->installmentNumber] = $parcela;                }                $hasNextKey = $dados->cursor->hasNextKey;                if(property_exists($dados->cursor, 'nextKey')){                    $nextKey = $dados->cursor->nextKey;                }                else{                    $nextKey = '';                }            }            else{                $hasNextKey = FALSE;                $nextKey = '';            }        }        return $parcelas;    }        /* Fim: Lançamento de Vendas do dia*/        /* Inicio: Consulta dos cartões previstos do dia */        public function bucarCartoesPrevistosPorDia($data_inicial,$data_final){        $unidades = $this->benepop->get_unidades();        $this->token = $this->api_userede->getToken()->access_token;        for ($x = 0; $x < count($unidades); $x++) {            $un = $unidades[$x];            $cartoes = $this->benepop->get_cartoes_previstos($data_inicial,$data_final,$un->id_unidade);            foreach($cartoes as $cartao){                $this->buscarTransacaoCartao($cartao->codigo_autenticacao, $un->id_unidade);            }        }    }        /* Fim: Consulta dos cartões previstos do dia */            /* Lógica de preparação de cache */    public function gerar_cache(){        $starttime = time();        $unidades = $this->benepop->get_unidades_erede();        $this->token = $this->api_userede->getToken()->access_token;        for ($x = 0; $x < count($unidades); $x++) {            $un = $unidades[$x];            $data = '2023-10-02';            $limite = strtotime('2022-01-01');            echo "<h1>$un->erede_companynumber</h1>";            while(strtotime($data) > $limite){                $now = time()-$starttime;                if ($now > 50) {                    echo "próximo: $un->erede_companynumber - $data";                    return;                }                $this->buscarVendasPorDiaApiRede($data,$data,$un->erede_companynumber);                $this->buscarParcelasPorDiaApiRede($data,$data,$un->erede_companynumber);                $data = soma_dias_uteis($data, 1, array(0,1,2,3,4,5,6), array(), '-');            }        }    }    public function gerar_cache2(){        $starttime = time();        $unidades = $this->benepop->get_unidades_erede();        $this->token = $this->api_userede->getToken()->access_token;        for ($x = 0; $x < count($unidades); $x++) {            $un = $unidades[$x];            $data = '2022-01-01';            $limite = strtotime('2023-10-02');            echo "<h1>$un->erede_companynumber</h1>";            while(strtotime($data) < $limite){                $now = time()-$starttime;                if ($now > 50) {                    echo "próximo: $un->erede_companynumber - $data";                    return;                }                $this->buscarVendasPorDiaApiRede($data,$data,$un->erede_companynumber);                $this->buscarParcelasPorDiaApiRede($data,$data,$un->erede_companynumber);                $data = soma_dias_uteis($data, 1, array(0,1,2,3,4,5,6), array());            }        }    }    public function gerar_cache3(){        $starttime = time();        $unidades = $this->benepop->get_unidades_erede();        $this->token = $this->api_userede->getToken()->access_token;        for ($x = 4; $x < count($unidades); $x++) {            $un = $unidades[$x];            $data = '2023-10-02';            $limite = strtotime('2022-01-01');            echo "<h1>$un->erede_companynumber</h1>";            while(strtotime($data) > $limite){                $now = time()-$starttime;                if ($now > 50) {                    echo "próximo: $un->erede_companynumber - $data";                    return;                }                $this->buscarVendasPorDiaApiRede($data,$data,$un->erede_companynumber);                $this->buscarParcelasPorDiaApiRede($data,$data,$un->erede_companynumber);                $data = soma_dias_uteis($data, 1, array(0,1,2,3,4,5,6), array(), '-');            }        }    }}