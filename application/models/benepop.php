<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class benepop extends B10_Model{    private $benepop_db;        public function __construct(){        parent::__construct();        $this->benepop_db = $this->load->database('benepop',TRUE);    }        public function baixar_boletos_expirados(){        $this->benepop_db->where('remessa_gerada','E');        $this->benepop_db->where('data_vencimento <', soma_dias_uteis(date('Y-m-d'), 58, array(0,1,2,3,4,5,6), array(), '-'));        $this->benepop_db->update('ap2_boleto_bancario',array('remessa_gerada'=>'B'));        return $this->benepop_db->affected_rows();    }        public function baixar_boletos_contas_a_receber_baixado(){        $affected = 0;        $this->benepop_db->where("(remessa_gerada = 'E' OR remessa_gerada = 'A' OR remessa_gerada = 'R')",FALSE,FALSE);        $this->benepop_db->where('gcotb014_mov_finc.t014_valor_pago >',0);        $this->benepop_db->join('gcotb014_mov_finc','gcotb014_mov_finc.t014_cod_mov_finc = ap2_boleto_bancario.id_cta_receber');        $this->benepop_db->select('ap2_boleto_bancario.*');        foreach($this->benepop_db->get('ap2_boleto_bancario')->result() as $boleto){            $this->benepop_db->where('bol_id',$boleto->bol_id);            $this->benepop_db->update('ap2_boleto_bancario',array('remessa_gerada'=>'B'));            $affected++;        }        return $affected;    }        public function get_boletos_a_consultar($parametros = array()){        if(($parametros['limite_dias_vencimento'] ?? FALSE)){            $this->benepop_db->where('ap2_boleto_bancario.data_vencimento <',soma_dias_uteis(date('Y-m-d'), $parametros['limite_dias_vencimento'], array(0,1,2,3,4,5,6), array()));        }        $this->benepop_db->where('cad_unidade.id_conta_boleto_padrao >',0);        $this->benepop_db->where("(remessa_gerada = 'E' OR remessa_gerada = 'A' OR remessa_gerada = 'R')",FALSE,FALSE);        $this->benepop_db->where('enviado_webservice','S');        $this->benepop_db->where('data_vencimento >=', soma_dias_uteis(date('Y-m-d'), 60, array(0,1,2,3,4,5,6), array(), '-'));        $this->benepop_db->where('gcotb014_mov_finc.t014_valor_pago',NULL);        $this->benepop_db->order_by('data_consulta_titulo','asc');        $this->benepop_db->join('gcotb014_mov_finc','gcotb014_mov_finc.t014_cod_mov_finc = ap2_boleto_bancario.id_cta_receber');        $this->benepop_db->join('cad_unidade','gcotb014_mov_finc.id_unidade = cad_unidade.id_unidade');        if(($parametros['limite_documentos'] ?? FALSE)){            $this->benepop_db->limit($parametros['limite_documentos']);        }        return $this->benepop_db->get('ap2_boleto_bancario')->result();    }        public function get_boletos_a_registrar(){        $this->benepop_db->where('cad_unidade.id_conta_boleto_padrao >',0);        $this->benepop_db->where('remessa_gerada','E');        $this->benepop_db->where('enviado_webservice','N');        $this->benepop_db->where('data_vencimento >=', date('Y-m-d'));        $this->benepop_db->where('gcotb014_mov_finc.t014_valor_pago',NULL);        $this->benepop_db->order_by('ap2_boleto_bancario.bol_id','desc');        $this->benepop_db->join('gcotb014_mov_finc','gcotb014_mov_finc.t014_cod_mov_finc = ap2_boleto_bancario.id_cta_receber');        $this->benepop_db->join('cad_unidade','gcotb014_mov_finc.id_unidade = cad_unidade.id_unidade');        $this->benepop_db->select('ap2_boleto_bancario.*, gcotb014_mov_finc.id_unidade');        return $this->benepop_db->get('ap2_boleto_bancario')->result();    }        public function get_boleto($id_unidade,$nosso_numero){        $this->benepop_db->where('gcotb014_mov_finc.id_unidade',$id_unidade);        $this->benepop_db->where('ap2_boleto_bancario.nosso_numero',$nosso_numero);        $this->benepop_db->where('cad_unidade.id_conta_boleto_padrao >',0);        //$this->benepop_db->where("(remessa_gerada = 'E' OR remessa_gerada = 'A')",FALSE,FALSE);        //$this->benepop_db->where('(gcotb014_mov_finc.t014_valor_pago IS NULL OR gcotb014_mov_finc.t014_valor_pago = 0)',FALSE,FALSE);        $this->benepop_db->order_by('gcotb014_mov_finc.id_unidade','asc');        $this->benepop_db->join('gcotb014_mov_finc','gcotb014_mov_finc.t014_cod_mov_finc = ap2_boleto_bancario.id_cta_receber');        $this->benepop_db->join('cad_unidade','gcotb014_mov_finc.id_unidade = cad_unidade.id_unidade');        $this->benepop_db->select('ap2_boleto_bancario.*, gcotb014_mov_finc.id_unidade, gcotb014_mov_finc.t014_data_lancamento');        return $this->benepop_db->get('ap2_boleto_bancario')->row();    }        public function baixar_boleto($boleto,$dados_boleto){        $this->benepop_db->where('bol_id',$boleto->bol_id);        $this->benepop_db->update('ap2_boleto_bancario',array(            'id_boleto_itau' => $dados_boleto->id_boleto,            'data_consulta_titulo' => date('Y-m-d H:i:s'),            'remessa_gerada' => 'B'        ));    }        public function provisionar_pagamento_boleto($boleto,$dados_boleto){        $this->benepop_db->where('bol_id',$boleto->bol_id);        $this->benepop_db->update('ap2_boleto_bancario',array(            'id_boleto_itau' => $dados_boleto->id_boleto,            'data_consulta_titulo' => date('Y-m-d H:i:s'),            'remessa_gerada' => 'A'        ));    }        public function liquidar_boleto($boleto,$dados_boleto){        $data_pagamento = substr($dados_boleto->dado_boleto->pagamentos_cobranca[0]->data_inclusao_pagamento,0,10);        $valor_pagamento = $dados_boleto->dado_boleto->pagamentos_cobranca[0]->valor_pago_total_cobranca;        $nosso_numero = $boleto->nosso_numero;        $cliente = $dados_boleto->dado_boleto->pagador->pessoa->nome_pessoa;                $where_boleto = array('bol_id'=>$boleto->bol_id);        $update_boleto = array(            'id_boleto_itau' => $dados_boleto->id_boleto,            'data_consulta_titulo' => date('Y-m-d H:i:s'),            'remessa_gerada' => 'L'        );        $this->benepop_db->where($where_boleto);        $this->benepop_db->update('ap2_boleto_bancario',$update_boleto);                        $where_finc_baixa = array('t014_cod_mov_finc'=>$boleto->id_cta_receber);        $this->benepop_db->where($where_finc_baixa);        $mov_finc = $this->benepop_db->get('gcotb014_mov_finc')->row();                        $where_unidade = array('id_unidade'=>$mov_finc->id_unidade);        $this->benepop_db->where($where_unidade);        $unidade = $this->benepop_db->get('cad_unidade')->row();                $tipo_boleto = substr($data_pagamento, 7) == substr($mov_finc->t014_data_lancamento,7) ? 'Avista' : 'Prazo';        $update_finc_baixa = array(            't014_valor_pago' => $valor_pagamento,            't014_data_pagamento' => $data_pagamento,            'orc_forma_de_parcelamento' => "Boleto $tipo_boleto"        );        $this->benepop_db->where($where_finc_baixa);        $this->benepop_db->update('gcotb014_mov_finc',$update_finc_baixa);                        $insert_caixa_baixa = array(            'valor' => $valor_pagamento,            'op' => 'C',            'total' => $valor_pagamento,            'multa' => 0,            'juros' => 0,            'vencimento' => $mov_finc->t014_data_vencimento,            'dt_lancamento' => $data_pagamento,            'cliente' => $mov_finc->t014_codigo_cliente_t001,            'origem' => $mov_finc->orc_forma_de_parcelamento,            'aberto_por' => 'Sistema',            'id_receber' => $mov_finc->t014_cod_mov_finc,            'n_orcamento' => $mov_finc->id_orcamento,            'id_banco' => $unidade->id_conta_boleto_padrao,            'id_unidade' => $mov_finc->id_unidade        );        $this->benepop_db->insert('mov_caixa_grade',$insert_caixa_baixa);                        $insert_pagar_tarifa = array(            'dt_pagamento' => $data_pagamento,            'nome_movimento' => 'Liquidação Título Bancário',            'usuario_mov' => 'Sistema',            'observacao' => "$nosso_numero - $cliente",            'dt_vencimento' => $data_pagamento,            'dt_lancamento' => $data_pagamento,            'nr_documento' => $nosso_numero,            'id_fornecedor' => $unidade->id_conta_fornecedor_padrao,            'valor' => $unidade->valor_boleto,            'valor_pago' => $unidade->valor_boleto,            'fin_plan_id' => 98,            'juros' => 0,            'multa' => 0,            'id_unidade' => $mov_finc->id_unidade        );        $this->benepop_db->insert('fin_cad_pagar',$insert_pagar_tarifa);                        $this->benepop_db->where(array(            'nr_documento' => $nosso_numero,            'id_fornecedor' => $unidade->id_conta_fornecedor_padrao,            'valor' => $unidade->valor_boleto,            'valor_pago' => $unidade->valor_boleto,            'fin_plan_id' => 98,            'id_unidade' => $mov_finc->id_unidade        ));        $id_contas_a_pagar = $this->benepop_db->get('fin_cad_pagar')->row()->id_pagar;        $insert_caixa_tarifa = array(            'valor' => $unidade->valor_boleto,            'op' => 'D',            'total' => $unidade->valor_boleto,            'multa' => 0,            'juros' => 0,            'vencimento' => $data_pagamento,            'dt_lancamento' => $data_pagamento,            'cliente' => $unidade->id_conta_fornecedor_padrao,            'origem' => utf8_decode('Débito Em Conta'),            'aberto_por' => 'Sistema',            'id_contapagar' => $id_contas_a_pagar,            'n_doc' => "Boleto $nosso_numero",            'n_orcamento' => 0,            'id_banco' => $unidade->id_conta_boleto_padrao,            'id_unidade' => $mov_finc->id_unidade        );        $this->benepop_db->insert('mov_caixa_grade',$insert_caixa_tarifa);    }        public function atualizar_boleto($boleto,$dados_boleto){        $this->benepop_db->where('bol_id',$boleto->bol_id);        $this->benepop_db->update('ap2_boleto_bancario',array(            'id_boleto_itau' => $dados_boleto->id_boleto,            'data_consulta_titulo' => date('Y-m-d H:i:s'),        ));        $this->benepop_db->where('t014_cod_mov_finc',$boleto->id_cta_receber);        $this->benepop_db->where('orc_forma_de_parcelamento','Boleto');        $mov_finc = $this->benepop_db->get('gcotb014_mov_finc')->row();        if(is_object($mov_finc)){            if(strtotime(soma_dias_uteis($mov_finc->t014_data_lancamento, 2, array(1,2,3,4,5), array())) < strtotime(date('Y-m'))){                $this->benepop_db->where('t014_cod_mov_finc',$boleto->id_cta_receber);                $this->benepop_db->update('ap2_boleto_bancario',array(                    'orc_forma_de_parcelamento' => 'Boleto Prazo'                ));            }        }    }        public function registrar_boleto($boleto){        $this->benepop_db->where('bol_id',$boleto->bol_id);        $this->benepop_db->update('ap2_boleto_bancario',array(            'enviado_webservice' => 'S'        ));    }        public function atualizar_dados_boleto($id_unidade, $nosso_numero){        $dados_atualizados = $this->benepop_db->query("            select                abb.bol_id,                abb.nosso_numero,                cc.nome AS pagador_nome,                cc.cpf AS pagador_documento,                trim(concat(cc.endereco,' ',cc.numero,' ',cc.complemento)) AS pagador_logradouro,                 cc.bairro AS pagador_bairro,                cc.cidade AS pagador_municipio,                cc.estado AS pagador_uf,                cc.cep AS pagador_cep            from ap2_boleto_bancario abb             join gcotb014_mov_finc gmf on abb.id_cta_receber = gmf.t014_cod_mov_finc             join cad_cliente cc on gmf.t014_codigo_cliente_t001 = cc.id_cliente            where                    abb.nosso_numero = '$nosso_numero'                    AND gmf.id_unidade = $id_unidade        ")->row_array();        $this->benepop_db->where('bol_id',$dados_atualizados['bol_id']);        $this->benepop_db->where('nosso_numero',$dados_atualizados['nosso_numero']);        unset($dados_atualizados['bol_id']);        unset($dados_atualizados['nosso_numero']);        $this->benepop_db->update('ap2_boleto_bancario',$dados_atualizados);        return $this->get_boleto($id_unidade, $nosso_numero);    }        public function validar_boleto($id_unidade,$nosso_numero){        $boleto = $this->get_boleto($id_unidade,$nosso_numero);        if(!is_object($boleto)){            echo json_encode(array('resultado'=>'erro','conteudo'=>'Boleto não encontrado no banco de dados'));            return false;        }        $boleto->id_beneficiario = $boleto->agencia_numero.str_pad($boleto->beneficiario_cod_cliente, 8, '0', STR_PAD_LEFT);        if(            !$boleto->id_beneficiario ||            !$boleto->pagador_nome ||            !$boleto->pagador_documento ||            !$boleto->pagador_logradouro ||            !$boleto->pagador_bairro ||            !$boleto->pagador_municipio ||            !$boleto->pagador_uf ||            !$boleto->pagador_cep ||            !$boleto->carteira ||            strtotime($boleto->data_vencimento) < strtotime(date('Y-m-d'))        ){            $boleto = $this->atualizar_dados_boleto($id_unidade, $nosso_numero);            $boleto->id_beneficiario = $boleto->agencia_numero.str_pad($boleto->beneficiario_cod_cliente, 8, '0', STR_PAD_LEFT);        }        if(!$boleto->id_beneficiario){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo id_beneficiario vazio')); return false;}        if(!$boleto->pagador_nome){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo pagador_nome vazio')); return false;}        if(!$boleto->pagador_documento){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo pagador_documento vazio')); return false;}        if(!$boleto->pagador_logradouro){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo pagador_logradouro vazio')); return false;}        if(!$boleto->pagador_bairro){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo pagador_bairro vazio')); return false;}        if(!$boleto->pagador_municipio){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo pagador_municipio vazio')); return false;}        if(!$boleto->pagador_uf){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo pagador_uf vazio')); return false;}        if(!$boleto->pagador_cep){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo pagador_cep vazio')); return false;}        if(!$boleto->carteira){ echo json_encode(array('resultado'=>'erro','conteudo'=>'Campo carteira vazio')); return false;}        if(!strtotime($boleto->data_vencimento) >= strtotime(date('Y-m-d'))){ echo json_encode(array('resultado'=>'erro','conteudo'=>'A data do vencimento precisa ser maior que a data atual')); return false;}        return $boleto;    }        public function get_unidade_por_company_number($erede_companynumber){        $this->benepop_db->where('erede_companynumber',$erede_companynumber);        return $this->benepop_db->get('cad_unidade')->row();    }        public function get_unidade($id_unidade){        $this->benepop_db->where('id_unidade',$id_unidade);        return $this->benepop_db->get('cad_unidade')->row();    }        public function get_unidades(){        return $this->benepop_db->get('cad_unidade')->result();    }        public function get_unidades_erede(){        $this->benepop_db->where('erede_companynumber IS NOT NULL',FALSE,FALSE);        return $this->benepop_db->get('cad_unidade')->result();    }        public function get_venda_cartao($nsu){        $this->benepop_db->where('codigo_autenticacao',$nsu);        return $this->benepop_db->get('fin_con_cartao')->row();    }        public function get_cartoes_previstos(){        $this->benepop_db->where('fin_con_cartao.data_prevista <=',date('Y-m-d'));        $this->benepop_db->where_in('fin_con_cartao.status',array(6));        $this->benepop_db->join('gcotb014_mov_finc','gcotb014_mov_finc.t014_cod_mov_finc = fin_con_cartao.id_receber');        $this->benepop_db->select('fin_con_cartao.codigo_autenticacao,gcotb014_mov_finc.id_unidade');        //$this->benepop_db->group_by('fin_con_cartao.codigo_autenticacao,gcotb014_mov_finc.id_unidade');        $this->benepop_db->order_by('fin_con_cartao.data_prevista','desc');        return $this->benepop_db->get('fin_con_cartao')->result();    }        public function atualizar_data_venda_cartao($nsu,$data){        if($data){            $this->benepop_db->where('codigo_autenticacao',$nsu);            $this->benepop_db->update('fin_con_cartao',array(                'data_venda' => $data            ));        }    }        public function atualizar_status_cartoes_vendas(){        $this->benepop_db->where('status',1);        $parcelas = count($this->benepop_db->get('fin_con_cartao')->result());        //removerEmProducao:$this->benepop_db->where('status',1);        //removerEmProducao:$this->benepop_db->update('fin_con_cartao',array('status'=>10));        return $parcelas;    }        public function lancar_transacao_cartao($transacao,$unidade){        $this->benepop_db->where('id_venda',(string)$transacao->hashUnique);        $venda = $this->benepop_db->get('fin_venda_cartao')->row();        if(!is_object($venda)){            if(!property_exists($transacao, 'strAuthorizationCode')){                $transacao->strAuthorizationCode = $transacao->authorizationCode;            }            $this->benepop_db->insert('fin_venda_cartao',array(                'status' => $transacao->status,                'valor' => $transacao->amount,                'taxa' => $transacao->mdrFee,                'valor_taxa' => $transacao->mdrAmount,                'valor_liquido' => $transacao->netAmount,                'bandeira' => $transacao->brandCode,                'cartao' => $transacao->cardNumber,                'autorizacao' => $transacao->strAuthorizationCode,                'nsu' => $transacao->nsu,                'tipo_equipamento' => $transacao->captureType,                'equipamento' => $transacao->device,                'data' => $transacao->saleDate,                'parcelas' => $transacao->installmentQuantity,                'tipo' => $transacao->modality->type,                'numero_venda' => $transacao->saleSummaryNumber,                'id_venda' => $transacao->hashUnique,                'id_unidade' => $unidade->id_unidade,            ));        }    }        public function atualizar_status_cartao($transacao,$parcelas,$skip = FALSE,$debug = FALSE){        $this->session->set_userdata('debug',NULL);        if(!isset($parcelas[$transacao->nsu])){            $parcela = new stdClass();            $parcela->netAmount = $transacao->netAmount;            $parcela->expirationDate = soma_dias_uteis($transacao->saleDate, $transacao->daysToReceive, array(0,1,2,3,4,5,6),array());            $parcelas[$transacao->nsu] = array(1=>$parcela);        }        $this->benepop_db->order_by('vencimento','asc');        $this->benepop_db->where('codigo_autenticacao',(string)$transacao->nsu);        $parcelas_db = $this->benepop_db->get('fin_con_cartao')->result();        if(count($parcelas_db) == 0){            $mensagem = "$transacao->nsu: Parcelas não encontradas no banco de dados<br>";            $this->session->set_userdata('debug',$mensagem);            if($debug){                echo $mensagem;            }            return FALSE;        }        if(count($parcelas_db) != count($parcelas[$transacao->nsu])){            if(count($parcelas_db) > 0 && count($parcelas_db) < count($parcelas[$transacao->nsu])){                if($this->preencher_nsu_parcelas_cartao($parcelas_db[0]) && $skip === FALSE){                    $this->atualizar_status_cartao($transacao,$parcelas,TRUE,$debug);                }                else{                    $mensagem = "$transacao->nsu: quantidade de parcelas incompatíveis. userede: ".count($parcelas[$transacao->nsu]).' <> db: '.count($parcelas_db).'<br>';                    $this->session->set_userdata('debug',$mensagem);                    if($debug){                        echo $mensagem;                    }                    return FALSE;                }            }            else{                $mensagem = "$transacao->nsu: quantidade de parcelas incompatíveis. userede: ".count($parcelas[$transacao->nsu]).' <> db: '.count($parcelas_db).'<br>';                $this->session->set_userdata('debug',$mensagem);                if($debug){                    echo $mensagem;                }                return FALSE;            }        }        if($transacao->installmentQuantity > 1 && count($parcelas) == 1){            $tipo = 'Cartão Crediário';        }        elseif($transacao->modality->type == 'CREDIT' && count($parcelas) == 1){            $tipo = 'Cartão de Crédito Avista';        }        elseif($transacao->modality->type == 'CREDIT'){            $tipo = 'Cartão de Crédito Prazo';        }        else{            $tipo = 'Cartão de Débito';        }        foreach($parcelas_db as $x=>$row){            $parcela = $parcelas[$transacao->nsu][$x+1];            $this->benepop_db->where('codigo_autenticacao',(string)$transacao->nsu);            $this->benepop_db->where('id_cartao',$row->id_cartao);            $this->benepop_db->update('fin_con_cartao',array(                'vencimento' => $parcela->expirationDate,                'bandeira' => $transacao->brandCode,                'status' => in_array($row->status,array(1,10,11)) ? 6 : $row->status,                'data_prevista' => $parcela->expirationDate,                'hora_venda' => $transacao->saleHour,                'status_venda' => $transacao->status,                'valor_atualizado' => $parcela->netAmount,                'modalidade' => (string)$transacao->modality->productCode,                'tipo' => $transacao->modality->type,                'numero_parcelas' => $transacao->installmentQuantity,                'taxa_mdr' => $transacao->mdrFee,                'valor_mdr' => $transacao->mdrAmount,                'valor_liquido' => $parcela->netAmount,                'prazo_recebimento' => $transacao->daysToReceive,                'numero_lote' => $transacao->saleSummaryNumber,                'numero_autorizacao' => $transacao->authorizationCode,                'numero_estabelecimento' => $transacao->merchant->companyNumber,                'nome_estabelecimento' => $transacao->merchant->companyName,                'cnpj' => $transacao->merchant->documentNumber,                'numero_cartao' => @$transacao->cardNumber,                'tipo_captura' => $transacao->captureType,                'tipo_terminal' => $transacao->deviceType,                'codigo_terminal' => $transacao->device,                'erede_paymentid' => $transacao->hashUnique,                'data_transacao' => $transacao->movementDate            ));            $this->benepop_db->where('t014_cod_mov_finc',$row->id_receber);            $this->benepop_db->update('gcotb014_mov_finc',array(                'orc_forma_de_parcelamento' => utf8_decode($tipo),                't014_data_vencimento' => $parcela->expirationDate            ));        }    }        public function atualizar_falha_conciliacao($unidade,$nsu,$mensagem){        $nsus_invalidos = (array)json_decode($this->parametro->get_valor('transacoes_nao_encontradas_userede'));        if(!in_array($nsu, $nsus_invalidos)){            $nsus_invalidos[] = $nsu;            $this->parametro->criar_parametro('transacoes_nao_encontradas_userede', json_encode($nsus_invalidos));            $this->benepop_db->insert('fin_log_falha_conciliacao_cartao',array(                'unidade' => $unidade->id_unidade,                'company_number' => $unidade->erede_companynumber,                'nsu' => $nsu,                'log' => $mensagem            ));        }    }        public function estornar_parcela_cartao($parcela){        $this->benepop_db->where('id_cartao',$parcela->id_cartao);        $this->benepop_db->update('fin_con_cartao',array('Sstatus'=>6));                $this->benepop_db->where('t014_cod_mov_finc',$parcela->id_receber);        $this->benepop_db->update('gcotb014_mov_finc',array(            't014_valor_pago'=>0,            't014_data_pagamento'=>NULL        ));                $this->benepop_db->where('id_receber',$parcela->id_receber);        $this->benepop_db->delete('mov_caixa_grade');                $this->benepop_db->where('id_receber',$parcela->id_receber);        $this->benepop_db->delete('mov_caixa_grade');                $tarifas = $this->benepop_db->query("            select a.id_pagar            from fin_cad_pagar a            join fin_cad_pagar b on a.observacao = b.observacao and a.id_pagar > b.id_pagar            where a.nr_documento = '$parcela->codigo_autenticacao%'        ")->result();                foreach($tarifas as $tarifa){            $this->benepop_db->where('id_pagar',$tarifa->id_pagar);            $this->benepop_db->delete('fin_cad_pagar');                        $this->benepop_db->where('id_contapagar',$tarifa->id_pagar);            $this->benepop_db->delete('mov_caixa_grade');        }    }        public function preencher_nsu_parcelas_cartao($cartao_localizado){        $this->benepop_db->where('t014_cod_mov_finc',$cartao_localizado->id_receber);        $mov_finc = $this->benepop_db->get('gcotb014_mov_finc')->row();        if(is_object($mov_finc)){            if($mov_finc->cod_negociacao){                $this->benepop_db->where('cod_negociacao',$mov_finc->cod_negociacao);                foreach($this->benepop_db->get('gcotb014_mov_finc')->result() as $parcela){                    $this->benepop_db->where('id_receber',$parcela->t014_cod_mov_finc);                    foreach($this->benepop_db->get('fin_con_cartao')->result() as $cartao){                        if($cartao->codigo_autenticacao == ''){                            $this->benepop_db->where('id_cartao',$cartao->id_cartao);                            $this->benepop_db->update('fin_con_cartao',array('codigo_autenticacao'=>$cartao_localizado->codigo_autenticacao));                        }                        else{                         }                    }                }                return true;            }        }        return false;    }        public function falha_conciliacao_cartao($nsu){        $this->benepop_db->where('codigo_autenticacao',$nsu);        $this->benepop_db->update('fin_con_cartao',array(            'status' => 11        ));    }        public function liquidar_cartoes_baixados($nsu = FALSE){        $this->benepop_db->where('status_venda','APPROVED');        if($nsu){            $this->benepop_db->where('codigo_autenticacao',$nsu);        }        else{            $this->benepop_db->where('data_prevista >=','2023-05-01');            $this->benepop_db->where('data_prevista <','2023-06-01');        }        $cartoes = $this->benepop_db->get('fin_con_cartao')->result();        foreach($cartoes as $cartao){            $this->benepop_db->where('t014_cod_mov_finc',$cartao->id_receber);            $this->benepop_db->update('gcotb014_mov_finc',array(                't014_data_pagamento' => $cartao->data_prevista,                't014_valor_pago' => $cartao->total_venda            ));        }    }        public function conciliar_cartao($parcela,$nsu){        $numeroParcela = $parcela->installmentNumber;        $this->benepop_db->order_by('id_cartao','asc');        $this->benepop_db->where('codigo_autenticacao',(string)$nsu);        foreach($this->benepop_db->get('fin_con_cartao')->result() as $x=>$row){            if($x == $numeroParcela-1){                $parcelaDB = $row;            }        }        if(!isset($parcelaDB)){            return;        }        if($parcelaDB->status == 6){            return;        }        if(in_array($parcelaDB->status, array(2,3))){            $this->estornar_parcela_cartao($parcelaDB);        }    }        public function liquidar_cartao($parcela,$nsu){        $data_pagamento = substr($parcela->paymentDate,0,10);        $valor_original = $parcela->amountInfo->originalAmount;        $valor_desconto = $parcela->amountInfo->discountAmount;        $numeroParcela = $parcela->installmentNumber;        $this->benepop_db->order_by('id_cartao','asc');        $this->benepop_db->where('codigo_autenticacao',(string)$nsu);        foreach($this->benepop_db->get('fin_con_cartao')->result() as $x=>$row){            if($x == $numeroParcela-1){                $parcelaDB = $row;            }        }                if(in_array($parcelaDB->status, array(2,3))){            return;        }                $this->benepop_db->where(array('id_cartao'=>$parcelaDB->id_cartao));        $this->benepop_db->update('fin_con_cartao',array(            'status' => $parcela->status == 'PAID' ? 2 : 3        ));                        $where_finc_baixa = array('t014_cod_mov_finc'=>$parcelaDB->id_receber);        $this->benepop_db->where($where_finc_baixa);        $mov_finc = $this->benepop_db->get('gcotb014_mov_finc')->row();                        $where_unidade = array('id_unidade'=>$mov_finc->id_unidade);        $this->benepop_db->where($where_unidade);        $unidade = $this->benepop_db->get('cad_unidade')->row();                        $update_finc_baixa = array(            't014_valor_pago' => $valor_original,            't014_data_pagamento' => $data_pagamento,        );        $this->benepop_db->where($where_finc_baixa);        $this->benepop_db->update('gcotb014_mov_finc',$update_finc_baixa);                        $insert_caixa_baixa = array(            'valor' => $valor_original,            'op' => 'C',            'total' => $valor_original,            'multa' => 0,            'juros' => 0,            'vencimento' => $mov_finc->t014_data_vencimento,            'dt_lancamento' => $data_pagamento,            'cliente' => $mov_finc->t014_codigo_cliente_t001,            'origem' => $mov_finc->orc_forma_de_parcelamento,            'aberto_por' => 'Sistema',            'id_receber' => $mov_finc->t014_cod_mov_finc,            'n_orcamento' => $mov_finc->id_orcamento,            'id_banco' => $unidade->erede_id_banco,            'id_unidade' => $mov_finc->id_unidade        );        $this->benepop_db->insert('mov_caixa_grade',$insert_caixa_baixa);                        $insert_pagar_tarifa = array(            'dt_pagamento' => $data_pagamento,            'nome_movimento' => utf8_decode('Tarifa de Cartão'),            'usuario_mov' => 'Sistema',            'observacao' => "$nsu - $parcela->installmentNumber",            'dt_vencimento' => $data_pagamento,            'dt_lancamento' => $data_pagamento,            'nr_documento' => $nsu,            'id_fornecedor' => $unidade->erede_id_fornecedor,            'valor' => $valor_desconto,            'valor_pago' => $valor_desconto,            'fin_plan_id' => 111,            'juros' => 0,            'multa' => 0,            'id_unidade' => $mov_finc->id_unidade        );        $this->benepop_db->insert('fin_cad_pagar',$insert_pagar_tarifa);                        $this->benepop_db->where(array(            'nr_documento' => $nsu,            'observacao' => "$nsu - $parcela->installmentNumber",            'id_fornecedor' => $unidade->erede_id_fornecedor,            'valor' => $valor_desconto,            'valor_pago' => $valor_desconto,            'fin_plan_id' => 111,            'id_unidade' => $mov_finc->id_unidade        ));        $id_contas_a_pagar = $this->benepop_db->get('fin_cad_pagar')->row()->id_pagar;        $insert_caixa_tarifa = array(            'valor' => $valor_desconto,            'op' => 'D',            'total' => $valor_desconto,            'multa' => 0,            'juros' => 0,            'vencimento' => $data_pagamento,            'dt_lancamento' => $data_pagamento,            'cliente' => $unidade->erede_id_fornecedor,            'origem' => utf8_decode('Débito Em Conta'),            'aberto_por' => 'Sistema',            'id_contapagar' => $id_contas_a_pagar,            'n_doc' => utf8_decode("Cartão $nsu"),            'n_orcamento' => 0,            'id_banco' => $unidade->erede_id_banco,            'id_unidade' => $mov_finc->id_unidade        );        $this->benepop_db->insert('mov_caixa_grade',$insert_caixa_tarifa);    }        public function remover_vendas_duplicadas(){        $vendas = $this->benepop_db->get('fin_venda_cartao')->result();        $ids = array();        foreach($vendas as $venda){            if(in_array($venda->id_venda, $ids)){                $this->benepop_db->where('id_venda',$venda->id_venda);                $this->benepop_db->delete('fin_venda_cartao');            }            else{                $ids[] = $venda->id_venda;            }        }    }        public function remover_cartoes_duplicados(){        $this->benepop_db->query('            delete from fin_con_cartao            where id_cartao IN(                select fcc2.id_cartao                from fin_con_cartao fcc                 join fin_con_cartao fcc2 on fcc.id_receber = fcc2.id_receber and fcc.id_cartao < fcc2.id_cartao                where fcc2.status = 1 OR fcc2.status = 11            )        ');    }        public function buscar_cartoes_pendentes_conciliacao($param){        $limite = $param['limite'] ?? 50;        $this->benepop_db->join('gcotb014_mov_finc gmf','fcc.id_receber = gmf.t014_cod_mov_finc');        $this->benepop_db->where_in('fcc.status',array(0,1));        $this->benepop_db->where('fcc.codigo_autenticacao <>','');        $this->benepop_db->where('gmf.id_unidade <>','1000');        $this->benepop_db->where('fcc.data_venda >','2022-01-01');        $this->benepop_db->order_by('fcc.status','asc');        //$this->benepop_db->limit($limite);        $this->benepop_db->select('fcc.codigo_autenticacao, gmf.id_unidade');        return $this->benepop_db->get('fin_con_cartao fcc')->result();    }        public function reprocessar_dias_venda_cartoes($id_unidade){        $this->benepop_db->where('fcc.status',1);        $this->benepop_db->where('fcc.data_venda >=','2022-01-01');        $this->benepop_db->where('gmf.id_unidade',$id_unidade);        $this->benepop_db->group_by('fcc.data_venda');        $this->benepop_db->order_by('fcc.data_venda');        $this->benepop_db->select('fcc.data_venda');        $this->benepop_db->join('gcotb014_mov_finc gmf','gmf.t014_cod_mov_finc = fcc.id_receber');        return $this->benepop_db->get('fin_con_cartao fcc')->result();    }        public function reprocessar_cartoes_nao_conciliados($id_unidade){        //$nsus_invalidos = (array)json_decode($this->parametro->get_valor('transacoes_nao_encontradas_userede'));        //$cartoes_invalidos = "'".implode("','",$nsus_invalidos)."'";        $this->benepop_db->where_in('fcc.status',array(1,10,11));        $this->benepop_db->where('fcc.data_venda >=','2022-01-01');        $this->benepop_db->where('fcc.data_venda <',date('Y-m-d'));        $this->benepop_db->where('fcc.codigo_autenticacao <>','0');        $this->benepop_db->where('gmf.id_unidade',$id_unidade);        //$this->benepop_db->where("fcc.codigo_autenticacao NOT IN ($cartoes_invalidos)",FALSE,FALSE);        $this->benepop_db->select('fcc.codigo_autenticacao, gmf.id_unidade');        $this->benepop_db->group_by('fcc.codigo_autenticacao, gmf.id_unidade, fcc.data_venda');        $this->benepop_db->join('gcotb014_mov_finc gmf','gmf.t014_cod_mov_finc = fcc.id_receber');        $this->benepop_db->order_by('fcc.data_venda','desc');        return $this->benepop_db->get('fin_con_cartao fcc')->result();    }        public function get_nsus_com_companynumber(){        $this->benepop_db->join('gcotb014_mov_finc gmf','gmf.t014_cod_mov_finc = fcc.id_receber');        $this->benepop_db->join('cad_unidade cu','gmf.id_unidade = cu.id_unidade');        $this->benepop_db->select('codigo_autenticacao, data_venda, cu.erede_companynumber');        $this->benepop_db->group_by('fcc.codigo_autenticacao');        $this->benepop_db->group_by('fcc.data_venda');        $this->benepop_db->group_by('cu.erede_companynumber');        $this->benepop_db->where('fcc.codigo_autenticacao <>','');        $nsus = $this->benepop_db->get('fin_con_cartao fcc')->result();        return $nsus;    }        public function ajustar_vencimentos_cartao($codigo_autenticacao = false){        if($codigo_autenticacao){            $this->benepop_db->where('codigo_autenticacao',$codigo_autenticacao);        }        $this->benepop_db->select('codigo_autenticacao');        $this->benepop_db->group_by('codigo_autenticacao');        $this->benepop_db->where('codigo_autenticacao <>','');        $nsus = $this->benepop_db->get('fin_con_cartao')->result();        $reprocessar = array();        foreach($nsus as $nsu){            $this->benepop_db->where('codigo_autenticacao',$nsu->codigo_autenticacao);            $this->benepop_db->order_by('vencimento');            $parcelas_por_vencimento = $this->benepop_db->get('fin_con_cartao')->result();            $this->benepop_db->where('codigo_autenticacao',$nsu->codigo_autenticacao);            $this->benepop_db->order_by('id_cartao');            $parcelas_por_id = $this->benepop_db->get('fin_con_cartao')->result();            foreach($parcelas_por_id as $x=>$parcela_por_id){                $parcela_por_vencimento = $parcelas_por_vencimento[$x];                if($parcela_por_id->vencimento != $parcela_por_vencimento->vencimento){                    $this->benepop_db->where('id_cartao',$parcela_por_id->id_cartao);                    $this->benepop_db->update('fin_con_cartao',array(                        'vencimento' => $parcela_por_vencimento->vencimento,                        'data_prevista' => $parcela_por_vencimento->data_prevista                    ));                    $reprocessar[$nsu->codigo_autenticacao] = $nsu->codigo_autenticacao;                }            }        }        return $reprocessar;    }        public function ajustar_vencimento_mov_finc(){        $this->benepop_db->query("            update gcotb014_mov_finc gmf            set t014_data_vencimento = fcc.data_prevista            from fin_con_cartao fcc            where                fcc.id_receber = gmf.t014_cod_mov_finc                and gmf.t014_data_vencimento <> fcc.data_prevista                and fcc.codigo_autenticacao not in ('846378','24255566')                and fcc.status in (2,3,6)        ");    }       /*     * Status de Cartões de Crédito     * 1 - Pendente Conciliação     * 2 - Recebido Banco      * 3 - Antecipados      * 4 - Cancelados      * 5 - Estornos      * 6 - Conciliado      * 10 - Processando      * 11 - Erro de Conciliação     */}