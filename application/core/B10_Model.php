<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class B10_Model extends CI_Model{    public      $crud;    protected   $register_control;    public      $db_error;    protected   $row;    protected   $CI;    protected   $module;    public function __construct() {        parent::__construct();        $this->CI =& get_instance();        require(APPPATH.'config/register_control.php');        $this->set_register_control($register_control);        $this->crud =   array(            'insert'    =>  TRUE,            'update'    =>  TRUE,            'delete'    =>  TRUE        );    }    protected function set_register_control($where_control){        if(is_array($where_control)){            if(is_array($this->get_register_control())){                $where_control = array_merge($this->get_register_control(),$where_control);            }            $this->register_control = $where_control;            return TRUE;        }        return FALSE;    }    protected function get_register_control(){        return $this->register_control;    }    protected function register_control($where){        $table              =   $this->table_name();        $register_control   =   $this->get_register_control();        if(!is_array($register_control)){            $register_control = array();        }        if(!is_array($where)){            $where = array();        }        $where[$table.'.bt_active']    =   1;        return array_merge($register_control,$where);    }    protected function load($row){        if(is_object($row)){            if(method_exists($row, 'row')){                $row = $row->row();                $this->row = $row;            }            else{                $this->row = $row;            }            return TRUE;        }        elseif(is_array($row)){            $query = $this->get($row);            if(is_object($query)){                $this->row = $query;                return TRUE;            }        }        return FALSE;    }    protected function save(){        foreach($this->fields() as $field){            $data[$field] = $this->row->$field;        }        $this->update(array('id'=>$this->row->id), $data);    }    public function active_data(){        return $this->row;    }    protected function table_name(){        $obj = new ReflectionClass($this);        return $obj->getName();    }    protected function module(){        return $this->module ? $this->module.'_' : '';    }    public function fields(){        return $this->db->list_fields($this->table_name());    }    public function table_settings(){        return array();    }    public function labels(){        return array();    }    public function field_settings(){        return array();    }    protected function index_check($data){        $return=TRUE;        $settings=$this->table_settings();        if(isset($settings['index'])){            foreach($settings['index'] as $index){                foreach($index as $field){                    $where[$field]=$data[$field];                }                $this->db->where($where);                $query=$this->db->get($this->table_name());                if($query->row){                    $this->db_error='Falha ao checar Index: valor repetido para o pareamento: '.http_build_query($where,'',', ');                    $return=FALSE;                }            }        }        return $return;    }    protected function fk_check($data){        $return=TRUE;        $settings=$this->field_settings();        foreach($data as $field=>$value){            if(isset($settings[$field])){                if($settings[$field]['type']==='dropdown'){                    $this->db->where(array($settings[$field]['fk_id']=>$value));                    $query=$this->db->get($settings[$field]['source']);                    if(!is_object($query->row())){                        $this->db_error='Falha ao checar FK: valor inválido para '.$settings[$field]['source'].'.'.$settings[$field]['fk_id'].' (Valor procurado: '.$value.')';                        $return=FALSE;                    }                }            }        }        return $return;    }    protected function log($operacao,$tabela,$campo=NULL,$valor=NULL,$condicao=NULL){        if($campo == 'persistencia' && $tabela == 'usuario'){            return FALSE;        }        $data=array(            'operacao'  =>  $operacao,            'campo'     =>  $campo,            'tabela'    =>  $tabela,            'valor'     =>  $valor,            'condicao'  =>  $condicao,            'momento'   =>  date('Y-m-d H:i:s'),            'usuario'   =>  $this->session->userdata('user_id'),            'ip'        =>  $_SERVER['REMOTE_ADDR'],        );        $this->db->insert('sys_log_alt', $data);    }    public function query_any($query_string){        $query=$this->db->query($query_string);        return $query->result();    }    /* -------------------------------------------------------------------------     * CRUD GENÉRICO     * -------------------------------------------------------------------------     */    /***** Create *****/    public function insert($data){        if(count($data) == 0){            return FALSE;        }        $data   =   $this->register_control($data,TRUE);        $index_check=$this->index_check($data);        $fk_check=$this->fk_check($data);        if(!$index_check || !$fk_check){            return FALSE;        }        if($this->db->insert($this->table_name(), $data)){            $insert_id=$this->db->insert_id();            $campos='';            $valores='';            foreach ($data as $key => $value) {                $campos .= $key.',';                $valores .= $value.',';            }            $this->log('INSERT', $this->table_name(),$campos,$valores);            return $insert_id;        }        else{            $this->db_error = $this->db->_error_mensagem();            return FALSE;        }    }    /***** Retrieve *****/    public function get($where,$order_by=FALSE,$limit=FALSE){        $where = $this->register_control($where);        $this->db->where($where);        if($order_by){            $this->db->order_by($order_by[0],$order_by[1]);        }        if($limit){            $this->db->limit($limit['lenght'],$limit['start']);        }        if($this)        $query=$this->db->get($this->table_name());        return $query->row();    }    public function get_array($where,$order_by=FALSE,$limit=FALSE){        $where = $this->register_control($where);        $this->db->where($where);        if($order_by){            $this->db->order_by($order_by[0],$order_by[1]);        }        if($limit){            $this->db->limit($limit['lenght'],$limit['start']);        }        $query=$this->db->get($this->table_name());        return $query->row_array();    }    public function get_all($where=FALSE,$order_by=FALSE,$limit=FALSE){        $where = $this->register_control($where);        if($where){            $this->db->where($where);        }        if($order_by){            if(is_array($order_by[0])){                foreach($order_by as $order){                    $this->db->order_by($order[0],$order[1]);                }            }            else{                $this->db->order_by($order_by[0],$order_by[1]);            }        }        if($limit){            $this->db->limit($limit['lenght'] ?? $limit['length'],$limit['start']);        }        $query=$this->db->get($this->table_name());        return $query->result();    }    public function get_all_datatables($columns,$where=FALSE){        $input      =   $this->se->get_filter();        if(!$input){            return array('datasource'=>array(),'metadata'=>array());        }                $value     =   $input['search']['value'];        if($value){            $alias              =   'a';            $datatable_search   =   array();            $table_infos        =   db_array($this->table_info->get_all(array('table' => $this->table_name())),'field',TRUE);            foreach($columns as $column){                $field  =   $table_infos[$column];                if($field->dropdown_table){                    $this->join($field->dropdown_table." $alias","$alias.".$field->dropdown_field.' = '.$field->table.'.'.$field->field,'LEFT');                    $datatable_search[] =   "$alias.".$field->dropdown_label." LIKE '".$value."%'";                    $field->alias   =   $alias;                    $alias  =   next_letter($alias);                }                $field->field   =   '`'.$field->field.'`';                switch ($field->type) {                    case 'date':                        $datatable_search[] =   $field->table.'.'.$field->field." = '".data_sql($value)."'";                        break;                    case 'datetime':                    case 'timestamp':                        $datatable_search[] =   $field->table.'.'.$field->field." = '". data_hora_sql($value)."'";                        break;                    case 'bigint':                    case 'int':                        if($this->se->only_numbers($value) == $value){                            $datatable_search[] =   $field->table.'.'.$field->field." = ".$value."";                        }                        break;                    case 'time':                        $datatable_search[] =   $field->table.'.'.$field->field." = '".$value."'";                        break;                    case 'decimal':                    case 'float':                        if(numero_sql($value) != 0){                            $datatable_search[] =   $field->table.'.'.$field->field." = ". numero_sql($value);                        }                        break;                    case 'pseudo':                    case 'varchar':                        $datatable_search[] =   $field->table.'.'.$field->field." LIKE '".$value."'";                        break;                    default:                        break;                }            }        }                $length     =   $input['length'];        $start      =   $input['start'];        $limit      =   array(            'lenght'    =>  $length,            'start'     =>  $start,        );                if($input['order'][0]['column']){            $order_by   =   array(                $input['order'][0]['column'],                $input['order'][0]['dir'],            );        }        if(isset($datatable_search)){            $this->db->where('('. implode(' OR ', $datatable_search).')');        }        $datasource =   $this->get_all($where,$order_by ?? FALSE,$limit ?? FALSE);                if(isset($datatable_search)){            $this->db->where('('. implode(' OR ', $datatable_search).')');        }        $this->db->select('COUNT(*) AS total');        $total      =   $this->get($where);                return array(            'datasource'    =>  $datasource,            'metadata'      =>  array(                'recordsTotal'      =>  $total->total,                'recordsFiltered'   =>  $total->total,                'pageNumber'        =>  ($start + $length) / $length,                'pageLength'        =>  $length            )        );    }    public function get_all_array($where=FALSE,$order_by=FALSE,$limit=FALSE){        $where = $this->register_control($where);        if($where){            $this->db->where($where);        }        if($order_by){            if(is_array($order_by[0])){                foreach($order_by as $order){                    $this->db->order_by($order[0],$order[1]);                }            }            else{                $this->db->order_by($order_by[0],$order_by[1]);            }        }        if($limit){            $this->db->limit($limit['lenght'],$limit['start']);        }        $query=$this->db->get($this->table_name());        return $query->result_array();    }    public function get_like($string,$order_by=FALSE,$limit=FALSE){        $this->db->where($this->register_control(array()));        if($order_by){            $this->db->order_by($order_by[0],$order_by[1]);        }        if($limit){            $this->db->limit($limit['lenght'],$limit['start']);        }        $this->db->like($string);        $query=$this->db->get($this->table_name());        return $query->result();    }    public function get_or($or_where=FALSE,$order_by=FALSE,$limit=FALSE){        $this->db->where($this->register_control($or_where));        if($or_where){            $this->db->or_where($or_where);        }        if($order_by){            $this->db->order_by($order_by[0],$order_by[1]);        }        if($limit){            $this->db->limit($limit['lenght'],$limit['start']);        }        $query=$this->db->get($this->table_name());        return $query->result();    }    /***** Update *****/    public function update($where,$data,$table_name = FALSE){        if($table_name === FALSE){            $table_name = $this->table_name();        }        if($table_name === FALSE){            $where = $this->register_control($where);        }        $index_check=$this->index_check($data);        $fk_check=$this->fk_check($data);        if(!$index_check || !$fk_check){            return FALSE;        }        $this->db->where($where);        if($this->db->update($table_name,$data)){            $campos='';            $valores='';            foreach ($data as $key => $value) {                $campos .= $key.',';                $valores .= $value.',';            }            $this->log('UPDATE', $table_name, substr($campos, 0, -1), substr($valores, 0, -1), http_build_query($where,'',', '));            return TRUE;        }        $this->db_error = $this->db->_error_mensagem();        return FALSE;    }    /***** Delete *****/    public function delete($where){        $where = $this->register_control($where);        $this->db->where($where);        if($this->db->update($this->table_name(),array('bt_active'=>0))){            $this->log('DELETE', $this->table_name(), NULL, NULL, http_build_query($where,'',', '));            return TRUE;        }        $this->db_error = $this->db->_error_mensagem();        return FALSE;    }    public function delete_validation($where,$cascade = array(),$restrict = array()){        if($this->can_delete()){            $this->load($this->get($where));            foreach($restrict as $searc_for){                $table_field    =   explode('.',$searc_for);                $table          =   $table_field[0];                $field          =   $table_field[1];                $pk             =   $this->table_info->get(array('table'=>$this->table_name(),'primary'=>1));                $key            =   $pk->field;                $this->load->model($table);                if(is_object($this->$table->get(array($field=>$this->row->$key)))){                    mensagem('Há restrições à exclusão deste registro','error',$table);                    return FALSE;                }            }            $this->before_delete($where);            if($this->delete($where)){                $this->after_delete($where);                foreach($cascade as $delete){                    $table_field    =   explode('.',$delete);                    $table          =   $table_field[0];                    $field          =   $table_field[1];                    $pk             =   $this->table_info->get(array('table'=>$this->table_name(),'primary'=>1));                    $key            =   $pk->field;                    $this->load->model($table);                    $this->$table->delete(array($field=>$this->row->$key));                }                mensagem('Registro apagado com sucesso!','success');                return TRUE;            }            else{                mensagem('Falha ao apagar o registro.','error');                return FALSE;            }        }    }    /***** Operações *****/    public function get_sum($fields,$group_by = FALSE,$where = FALSE,$order_by = FALSE,$limit = FALSE){        if(!is_array($fields)){            $fields = array($fields);        }        foreach($fields as $field){            $sum[] = "SUM($field) AS sum_$field";        }        $this->db->select(implode(', ', $sum));        if(!is_array($group_by)){            if($group_by !== FALSE){                $group_by = array($group_by);            }            else{                $group_by = array();            }        }        foreach($group_by as $group){            $this->db->group_by($group);        }        return $this->get_all($where, $order_by, $limit);    }        public function input_validation($id){        $_input = $this->se->get_filter();        if(!is_array($_input)){            return FALSE;        }        $tabela =   $this->module().$this->table_name();        $fields =   db_array($this->table_info->get_all(array('table'=>$tabela)),'field',TRUE);        $pk     =   $this->table_info->get(array('table'=>$tabela,'primary'=>1));        $this->table    =   $this->table_name();        $this->fields   =   $fields;        $this->pk       =   $pk;        foreach($_input as $key=>$value){            if(!isset($fields[$key])){                continue;            }            if($fields[$key]->type == 'pseudo' || $key == $pk->field){                continue;            }            if($fields[$key]->type == 'date' || $fields[$key]->type == 'datetime'){                $value          =   vazio_para_nulo($value);                $_input[$key]   =   $value;            }            if($fields[$key]->inner_function != ''){                foreach(explode(',',$fields[$key]->inner_function) as $function){                    $function   =   trim($function);                    $value      =   $function($value);                }                $input[$key]    =   $value;            }            else{                $input[$key]    =   $_input[$key];            }                    }        if($id){            if(!$this->can_update()){                mensagem('Não há permissão suficiente para editar este registro','error');                return FALSE;            }            if(count($_FILES)){                foreach($_FILES as $key=>$value){                    $file = $this->upload($key);                    if($file){                        $input[$key]    =   $file['arquivo'];                    }                }            }            $input =   $this->before_update(array($pk->field=>$id), $_input, $input);            $this->update(array($pk->field=>$id), $input);            $this->after_update(array($pk->field=>$id), $_input, $input);            mensagem('Dados atualizados com sucesso!','success');            return $id;        }        else{            if(!$this->can_insert()){                mensagem('Não há permissão para inserir registros','error');                return FALSE;            }            if(count($_FILES)){                foreach($_FILES as $key=>$value){                    $file = $this->upload($key);                    if($file){                        $input[$key]    =   $file['arquivo'];                    }                }            }            $input =   $this->before_insert($_input, $input);            if($id = $this->insert($input)){                $this->after_insert(array($pk->field=>$id),$_input, $input);                mensagem('Registro inserido com sucesso!','success');                set_last_id((uri_string().'/'.$id));            }            else{                mensagem('Falha ao inserir o registro','error');            }            return $id;        }    }        public function upload($field,$path = 'default',$prefix = 'file',$size = 10){        if (empty($_FILES[$field]['name'][0])):            return FALSE;        endif;        $upload = array(            'pasta'     => "upload/$path",            'tamanho'   => 1024 * 1024 * $size        );        if ($upload['tamanho'] < $_FILES[$field]['size']) {            exit;        }        if (!file_exists($upload['pasta'])):            mkdir(FCPATH.$upload['pasta'], 0777, true);            chmod(FCPATH.$upload['pasta'], 0777);        endif;        $type    = get_file_type($_FILES[$field]['tmp_name'],$_FILES[$field]['name']);        $arquivo = $upload['pasta'].'/'.$prefix.'_'.time().$type;        if (move_uploaded_file($_FILES[$field]['tmp_name'], $arquivo)) {            chmod($arquivo, 0777);        } else {            exit;        }        return array(            'arquivo'   =>  $arquivo,            'nome'      =>  $_FILES[$field]['name'],        );    }    protected function can_insert(){        if($this->crud['insert']){            return TRUE;        }        return FALSE;    }    protected function can_update(){        if($this->crud['update']){            return TRUE;        }        return FALSE;    }    protected function can_delete(){        if($this->crud['delete']){            return TRUE;        }        return FALSE;    }    public function before_update($where,$_input, $input){        return $input;    }    public function after_update($where,$_input, $input){            }    public function before_insert($_input, $input){        return $input;    }    public function after_insert($id, $_input, $input){        return $input;    }    public function before_delete($where){            }    public function after_delete($where){            }        public function get_field_data(){        return $this->db->field_data($this->table_name());    }            public function carga(){        $admin  =   $this->config->item('db_admin');        $prod   =   $this->config->item('db_producao');        $tabela =   $this->table_name();        $campos =   array();        foreach($this->fields() as $campo){            $campos[]   =   "a.$campo = b.$campo";        }        $set    =   implode(',',$campos);        $this->db->query("            UPDATE $prod.$tabela a JOIN $admin.$tabela b ON a.id = b.id            SET $set        ");        $this->db->query("            INSERT INTO $prod.$tabela            SELECT a.*            FROM $admin.$tabela a            LEFT JOIN $prod.$tabela b ON a.id = b.id            WHERE b.id IS NULL        ");        $this->db->query("            DELETE a            FROM $prod.$tabela a            LEFT JOIN $admin.$tabela b ON a.id = b.id            WHERE b.id IS NULL        ");    }}